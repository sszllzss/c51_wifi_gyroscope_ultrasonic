C51 COMPILER V9.59.0.0   DELAY                                                             03/06/2021 23:21:39 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE DELAY
OBJECT MODULE PLACED IN .\out\delay.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\device\delay.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\application;..\devi
                    -ce) DEBUG OBJECTEXTEND PRINT(.\out\Listings\delay.lst) OBJECT(.\out\delay.obj)

line level    source

   1          #include        "delay.h"
   2          #include        "timer.h"
   3          
   4          static uint32_t delay_ms_tick_cnt = 0;
   5          static uint16_t delay_TIM_Value = 0;
   6          //========================================================================
   7          // 函数: void  delay_ms(uint8_t ms)
   8          // 描述: 延时函数。
   9          // 参数: ms,要延时的ms数, 这里只支持1~255ms. 自动适应主时钟.
  10          // 返回: none.
  11          // 备注: 
  12          //========================================================================
  13          void  delay_ms_while(uint8_t ms)
  14          {
  15   1           unsigned int i;
  16   1               do{
  17   2                    i = MAIN_Fosc / 13000;
  18   2                        while(--i)    ;   //14T per loop
  19   2           }while(--ms);
  20   1      }
  21          void  delay_ms(uint16_t ms)
  22          {
  23   1          uint16_t time_bk = Timer_Get_Value(TIM0);
  24   1          uint32_t delay_ms_tick_cnt_bk = delay_ms_tick_cnt;
  25   1          if(0xFFFFFFFF-delay_ms_tick_cnt_bk <= ms)
  26   1          {
  27   2              while(delay_ms_tick_cnt<delay_ms_tick_cnt_bk+ms);
  28   2          }
  29   1          else
  30   1          {
  31   2              uint32_t while_cnt = ms - (0xFFFFFFFF-delay_ms_tick_cnt);
  32   2              while(delay_ms_tick_cnt>delay_ms_tick_cnt_bk);
  33   2              while(delay_ms_tick_cnt<while_cnt);
  34   2          }
  35   1          while(Timer_Get_Value(TIM0)<time_bk);
  36   1      }
  37          //us 只能是1~999
  38          void  delay_us(uint16_t us)
  39          {
  40   1          uint16_t time_bk;
  41   1          uint32_t delay_ms_tick_cnt_bk,while_cnt;
  42   1          if(us<=0 || us>999) return;
  43   1          time_bk = Timer_Get_Value(TIM0);
  44   1          delay_ms_tick_cnt_bk = delay_ms_tick_cnt;
  45   1          while_cnt =  ((MAIN_Fosc/1000000UL)*us);
  46   1          if((MAIN_Fosc/1000) - (time_bk-delay_TIM_Value) >= while_cnt)
  47   1          {
  48   2              
  49   2              while(Timer_Get_Value(TIM0) - time_bk < while_cnt);
  50   2          }
  51   1          else
  52   1          {
  53   2              while_cnt = while_cnt - ((MAIN_Fosc/1000) - (time_bk-delay_TIM_Value));
  54   2              while(delay_ms_tick_cnt==delay_ms_tick_cnt_bk);
C51 COMPILER V9.59.0.0   DELAY                                                             03/06/2021 23:21:39 PAGE 2   

  55   2              while(Timer_Get_Value(TIM0) < while_cnt);
  56   2          }
  57   1      }
  58          uint32_t delay_get_tick()
  59          {
  60   1          return delay_ms_tick_cnt;
  61   1      }
  62          static void delay_Timerout_Callback()//1ms进入一次中断
  63          {
  64   1      
  65   1          delay_ms_tick_cnt++;
  66   1          
  67   1      }
  68          void delay_init(void)
  69          {
  70   1          TIM_InitTypeDef def;
  71   1          def.TIM_Mode = TIM_16BitAutoReloadNoMask;//16位自动重装, 不可屏蔽中断
  72   1          def.TIM_Polity = PolityHigh;//高优先级
  73   1          def.TIM_Interrupt = ENABLE;//打开中断
  74   1          def.TIM_ClkSource=TIM_CLOCK_1T;//1T定时器
  75   1          def.TIM_ClkOut =  DISABLE;//关闭输出
  76   1          def.TIM_Timerout_Callback = delay_Timerout_Callback;
  77   1          delay_TIM_Value = def.TIM_Value = 0XFFFF - (MAIN_Fosc/1000);
  78   1          def.TIM_Run = ENABLE;//开始运行
  79   1          Timer_Inilize(TIM0,&def);
  80   1          
  81   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    398    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      25
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
